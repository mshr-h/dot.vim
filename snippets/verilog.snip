snippet     mod
abbr        module() endmodule
  module ${1:`expand("%:r")`}(${2:/* portlist */});
  ${3:/* code */}
  endmodule

snippet     al
abbr        always @() begin end
  always @(${1}) begin
    ${2}
  end

snippet     alclk
abbr        always @(posedge clk) begin end
  always @(posedge clk${1}) begin
    ${2}
  end

snippet     beginend
abbr        begin end
  begin
    ${1}
  end

snippet     case
abbr        case()...endcase
  case(${0:#variable})
    ${1:#value} : ${2:#target}
    default : #{3}
  endcase

snippet     reg
abbr        reg reg_name;
  reg ${1};

snippet     rega
abbr        reg [N:0] reg_name;
  reg [${1}:${2}] ${3};

snippet     regm
abbr        reg [N:0] reg_name [0:M];
  reg [${1}:${2}] ${3} [${4}:${5}];

snippet     wire
abbr        wire wire_name;
  wire ${1};

snippet     wirea
abbr        wire [N:0] wire_name;
  wire [${1}:${2}] ${3};

snippet     inc
abbr        `include "..."
  \`include "${1}"

snippet     def
abbr        `define def_name def_val
  \`define ${1:name} ${2:val}

snippet     ter
abbr        a ? b : c
  ${1} ? ${2} : ${3}

snippet     param
abbr        parmeter var = val;
  parameter ${1} = ${2};

snippet     if
abbr        if() begin...end
  if(${1:#:condition}) begin
    ${0:TARGET}
  end

snippet     ifelse
abbr        if() ... else ...
  if(${1:#:condition}) begin
    ${2:TARGET}
  end else begin
    ${3}
  end

snippet     ini
abbr        initial begin end
  initial begin
    ${0:TARGET}
  end

snippet     param
abbr        parameter name = val;
  parameter ${1:name} = ${2:val};

snippet     for
abbr        for(...; ...; ...) begin end
  for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4: = $1 + 1}) begin
    ${0:TARGET}
  end

snippet     while
abbr        while(...) begin end
  while(${1:#:condition}) begin
    ${0:TARGET}
  end

snippet     func
abbr        function  endfunction;
  function ${1:function_name};
    ${2:portlist};
    begin
      ${3:/* code */};
    end
  endfunction

snippet     tb
abbr        testbench
  \`include "${1}.v"
  \`default_nettype none

  module tb_$1;
  reg rst_n;
  reg clk;

  $1 ${2:_$1}
  (
    .rst_n (rst_n),
    .clk (clk)
  );

  parameter CLK_PERIOD = 10.0;
  always #(CLK_PERIOD/2) clk <= ~clk;

  initial begin
    $dumpfile("tb_$1.vcd");
    $dumpvars(0, tb_$1);
    #1 rst_n<=1'bx;clk<=1'bx;
    #(CLK_PERIOD)   rst_n<=1;
    #(CLK_PERIOD*3) rst_n<=0;clk<=0;
    repeat(5) @(posedge clk);
    rst_n<=1;
    @(posedge clk);
    repeat(2) @(posedge clk);
    $finish(2);
  end

  endmodule
  \`default_nettype wire
